{
  "name": "SCL",
  "scopeName": "source.scl",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#functions" },
    { "include": "#constants" },
    { "include": "#types" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#strings" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block",
          "begin": "\\(\\*",
          "end": "\\*\\)"
        },
        {
          "name": "comment.line.double-slash",
          "match": "//.*$"
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(AND|ANY|ARRAY|AT|BEGIN|CASE|CONST|CONTINUE|DIV|DO|ELSE|ELSIF|EN|END_CASE|END_CONST|END_FOR|END_FUNCTION|END_FUNCTION_BLOCK|END_IF|END_LABEL|END_ORGANIZATION_BLOCK|END_REPEAT|END_STRUCT|END_TYPE|END_VAR|END_WHILE|ENO|EXIT|FALSE|FOR|FUNCTION|FUNCTION_BLOCK|GOTO|IF|MOD|NIL|NOT|OF|OK|OR|ORGANIZATION_BLOCK|POINTER|PROGRAM|END_PROGRAM|REPEAT|RET_VAL|RETURN|STRUCT|THEN|TO|TRUE|TYPE|UNTIL|VAR|VAR_IN_OUT|VAR_INPUT|VAR_OUTPUT|VAR_TEMP|VOID|WHILE|XOR)\\b"
        }
      ]
    },

    "functions": {
      "patterns": [
        {
          "name": "support.function",
          "match": "\\b(ABS|SQR|SQRT|EXP|EXPD|LN|LOG|ACOS|ASIN|ATAN|COS|SIN|TAN|ROL|ROR|SHL|SHR|LEN|CONCAT|LEFT|RIGHT|MID|INSERT|DELETE|REPLACE|FIND|EQ_STRNG|NE_STRNG|GE_STRNG|LE_STRNG|GT_STRNG|LT_STRNG|INT_TO_STRING|STRING_TO_INT|DINT_TO_STRING|STRING_TO_DINT|REAL_TO_STRING|STRING_TO_REAL|SEL|MAX|MIN|LIMIT|MUX|BCD_TO_INT|INT_TO_BCD|BYTE_TO_INT|INT_TO_BYTE|BCD_TO_DINT|BLOCK_DB_TO_WORD|BOOL_TO_DINT|BOOL_TO_INT|BYTE_TO_BOOL|BYTE_TO_CHAR|BYTE_TO_DINT|BYTE_TO_INT|CHAR_TO_BYTE|CHAR_TO_INT|DATE_TO_DINT|DINT_TO_BCD|DINT_TO_BCD_DWORD|DINT_TO_BOOL|DINT_TO_BYTE|DINT_TO_DATE|DINT_TO_DWORD|DINT_TO_INT|DINT_TO_STRING|DINT_TO_TIME|DINT_TO_TOD|DINT_TO_WORD|DWORD_BCD_TO_DINT|DWORD_TO_BOOL|DWORD_TO_BYTE|DWORD_TO_DINT|DWORD_TO_INT|DWORD_TO_REAL|DWORD_TO_WORD|INT_TO_BCD|INT_TO_BCD_WORD|INT_TO_BOOL|INT_TO_BYTE|INT_TO_CHAR|INT_TO_DWORD|INT_TO_STRING|INT_TO_WORD|REAL_TO_DINT|REAL_TO_DWORD|REAL_TO_INT|REAL_TO_STRING|STRING_TO_CHAR|STRING_TO_DINT|STRING_TO_INT|STRING_TO_REAL|TIME_TO_DINT|TOD_TO_DINT|WORD_BCD_TO_INT|WORD_TO_BLOCK_DB|WORD_TO_BOOL|WORD_TO_BYTE|WORD_TO_DINT|WORD_TO_INT|ROUND|TRUNC|TIME_TO_S5TIME|S5TIME_TO_TIME)\\b"
        }
      ]
    },

    "constants": {
      "patterns": [
        {
          "name": "constant.language",
          "match": "\\b(TRUE|FALSE|NIL)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type",
          "match": "\\b(BOOL|BYTE|CHAR|COUNTER|DATE|DATE_AND_TIME|DINT|DWORD|INT|POINTER|REAL|S5TIME|STRING|TIME|TIME_OF_DAY|TIMER|TOD|UDT|VOID|WORD)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator",
          "match": ":=|\\+|-|\\*|/|MOD|DIV|\\*\\*|NOT|AND|OR|XOR|&|==|=|>=|<=|<>|>|<|\\(|\\)"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single",
          "begin": "'",
          "end": "'"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other",
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\b"
        }
      ]
    }
  }
}
